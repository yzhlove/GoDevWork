package obj

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *KitchenController) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Id"
	o = append(o, 0x83, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "Ovens"
	o = append(o, 0xa5, 0x4f, 0x76, 0x65, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Ovens)))
	for za0001 := range z.Ovens {
		if z.Ovens[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Ovens[za0001].MarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "LastTime"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.LastTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *KitchenController) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Ovens":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Ovens) >= int(zb0002) {
				z.Ovens = (z.Ovens)[:zb0002]
			} else {
				z.Ovens = make([]*Oven, zb0002)
			}
			for za0001 := range z.Ovens {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Ovens[za0001] = nil
				} else {
					if z.Ovens[za0001] == nil {
						z.Ovens[za0001] = new(Oven)
					}
					bts, err = z.Ovens[za0001].UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "LastTime":
			z.LastTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *KitchenController) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Ovens {
		if z.Ovens[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Ovens[za0001].Msgsize()
		}
	}
	s += 9 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Oven) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "Id"
	o = append(o, 0x8a, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "CakeId"
	o = append(o, 0xa6, 0x43, 0x61, 0x6b, 0x65, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.CakeId)
	// string "TotalSet"
	o = append(o, 0xa8, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x74)
	o = msgp.AppendUint32(o, z.TotalSet)
	// string "NowSetPoint"
	o = append(o, 0xab, 0x4e, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74)
	o = msgp.AppendUint32(o, z.NowSetPoint)
	// string "FinishSet"
	o = append(o, 0xa9, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x53, 0x65, 0x74)
	o = msgp.AppendUint32(o, z.FinishSet)
	// string "LastSettlementTime"
	o = append(o, 0xb2, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.LastSettlementTime)
	// string "FinishCakes"
	o = append(o, 0xab, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x43, 0x61, 0x6b, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.FinishCakes)))
	for za0001 := range z.FinishCakes {
		if z.FinishCakes[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Id"
			o = append(o, 0x82, 0xa2, 0x49, 0x64)
			o = msgp.AppendUint32(o, z.FinishCakes[za0001].Id)
			// string "Num"
			o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
			o = msgp.AppendUint32(o, z.FinishCakes[za0001].Num)
		}
	}
	// string "Cats"
	o = append(o, 0xa4, 0x43, 0x61, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Cats)))
	for za0002 := range z.Cats {
		// map header, size 2
		// string "CatId"
		o = append(o, 0x82, 0xa5, 0x43, 0x61, 0x74, 0x49, 0x64)
		o = msgp.AppendUint32(o, z.Cats[za0002].CatId)
		// string "StarTime"
		o = append(o, 0xa8, 0x53, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65)
		o = msgp.AppendInt64(o, z.Cats[za0002].StarTime)
	}
	// string "NowSetStartTime"
	o = append(o, 0xaf, 0x4e, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.NowSetStartTime)
	// string "NowSetEndTime"
	o = append(o, 0xad, 0x4e, 0x6f, 0x77, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.NowSetEndTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Oven) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "CakeId":
			z.CakeId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "TotalSet":
			z.TotalSet, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "NowSetPoint":
			z.NowSetPoint, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "FinishSet":
			z.FinishSet, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "LastSettlementTime":
			z.LastSettlementTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "FinishCakes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.FinishCakes) >= int(zb0002) {
				z.FinishCakes = (z.FinishCakes)[:zb0002]
			} else {
				z.FinishCakes = make([]*OvenFinishCake, zb0002)
			}
			for za0001 := range z.FinishCakes {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.FinishCakes[za0001] = nil
				} else {
					if z.FinishCakes[za0001] == nil {
						z.FinishCakes[za0001] = new(OvenFinishCake)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Id":
							z.FinishCakes[za0001].Id, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								return
							}
						case "Num":
							z.FinishCakes[za0001].Num, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Cats":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Cats) >= int(zb0004) {
				z.Cats = (z.Cats)[:zb0004]
			} else {
				z.Cats = make([]OvenCat, zb0004)
			}
			for za0002 := range z.Cats {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "CatId":
						z.Cats[za0002].CatId, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							return
						}
					case "StarTime":
						z.Cats[za0002].StarTime, bts, err = msgp.ReadInt64Bytes(bts)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		case "NowSetStartTime":
			z.NowSetStartTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "NowSetEndTime":
			z.NowSetEndTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Oven) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 7 + msgp.Uint32Size + 9 + msgp.Uint32Size + 12 + msgp.Uint32Size + 10 + msgp.Uint32Size + 19 + msgp.Int64Size + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.FinishCakes {
		if z.FinishCakes[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 3 + msgp.Uint32Size + 4 + msgp.Uint32Size
		}
	}
	s += 5 + msgp.ArrayHeaderSize + (len(z.Cats) * (16 + msgp.Uint32Size + msgp.Int64Size)) + 16 + msgp.Int64Size + 14 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OvenCat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CatId"
	o = append(o, 0x82, 0xa5, 0x43, 0x61, 0x74, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.CatId)
	// string "StarTime"
	o = append(o, 0xa8, 0x53, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.StarTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OvenCat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "CatId":
			z.CatId, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "StarTime":
			z.StarTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OvenCat) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint32Size + 9 + msgp.Int64Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OvenFinishCake) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.Num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OvenFinishCake) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Num":
			z.Num, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OvenFinishCake) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 4 + msgp.Uint32Size
	return
}
