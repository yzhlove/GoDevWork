package obj

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *CodeInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Id"
	o = append(o, 0x89, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "FixCode"
	o = append(o, 0xa7, 0x46, 0x69, 0x78, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.FixCode)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.Num)
	// string "StartTime"
	o = append(o, 0xa9, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.StartTime)
	// string "EndTime"
	o = append(o, 0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.EndTime)
	// string "TimesPerCode"
	o = append(o, 0xac, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint16(o, z.TimesPerCode)
	// string "TimesPerUser"
	o = append(o, 0xac, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72)
	o = msgp.AppendUint16(o, z.TimesPerUser)
	// string "ZoneIds"
	o = append(o, 0xa7, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ZoneIds)))
	for za0001 := range z.ZoneIds {
		o = msgp.AppendUint32(o, z.ZoneIds[za0001])
	}
	// string "Items"
	o = append(o, 0xa5, 0x49, 0x74, 0x65, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Items)))
	for za0002 := range z.Items {
		// map header, size 2
		// string "Id"
		o = append(o, 0x82, 0xa2, 0x49, 0x64)
		o = msgp.AppendUint32(o, z.Items[za0002].Id)
		// string "Num"
		o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
		o = msgp.AppendInt32(o, z.Items[za0002].Num)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CodeInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "FixCode":
			z.FixCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FixCode")
				return
			}
		case "Num":
			z.Num, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		case "StartTime":
			z.StartTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "EndTime":
			z.EndTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "TimesPerCode":
			z.TimesPerCode, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimesPerCode")
				return
			}
		case "TimesPerUser":
			z.TimesPerUser, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimesPerUser")
				return
			}
		case "ZoneIds":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ZoneIds")
				return
			}
			if cap(z.ZoneIds) >= int(zb0002) {
				z.ZoneIds = (z.ZoneIds)[:zb0002]
			} else {
				z.ZoneIds = make([]uint32, zb0002)
			}
			for za0001 := range z.ZoneIds {
				z.ZoneIds[za0001], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ZoneIds", za0001)
					return
				}
			}
		case "Items":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Items")
				return
			}
			if cap(z.Items) >= int(zb0003) {
				z.Items = (z.Items)[:zb0003]
			} else {
				z.Items = make([]Item, zb0003)
			}
			for za0002 := range z.Items {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Items", za0002)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Items", za0002)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Id":
						z.Items[za0002].Id, bts, err = msgp.ReadUint32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Items", za0002, "Id")
							return
						}
					case "Num":
						z.Items[za0002].Num, bts, err = msgp.ReadInt32Bytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Items", za0002, "Num")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Items", za0002)
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CodeInfo) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 8 + msgp.StringPrefixSize + len(z.FixCode) + 4 + msgp.Uint32Size + 10 + msgp.Int64Size + 8 + msgp.Int64Size + 13 + msgp.Uint16Size + 13 + msgp.Uint16Size + 8 + msgp.ArrayHeaderSize + (len(z.ZoneIds) * (msgp.Uint32Size)) + 6 + msgp.ArrayHeaderSize + (len(z.Items) * (8 + msgp.Uint32Size + msgp.Int32Size))
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Item) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "Num"
	o = append(o, 0xa3, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt32(o, z.Num)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Item) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Num":
			z.Num, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Num")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Item) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 4 + msgp.Int32Size
	return
}
