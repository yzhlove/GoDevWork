package obj

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z CodeUser) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "UID"
	o = append(o, 0x82, 0xa3, 0x55, 0x49, 0x44)
	o = msgp.AppendUint64(o, z.UID)
	// string "Zone"
	o = append(o, 0xa4, 0x5a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendUint32(o, z.Zone)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CodeUser) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UID":
			z.UID, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "Zone":
			z.Zone, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Zone")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CodeUser) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint64Size + 5 + msgp.Uint32Size
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CodeUsers) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Users"
	o = append(o, 0x81, 0xa5, 0x55, 0x73, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Users)))
	for za0001 := range z.Users {
		if z.Users[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "UID"
			o = append(o, 0x82, 0xa3, 0x55, 0x49, 0x44)
			o = msgp.AppendUint64(o, z.Users[za0001].UID)
			// string "Zone"
			o = append(o, 0xa4, 0x5a, 0x6f, 0x6e, 0x65)
			o = msgp.AppendUint32(o, z.Users[za0001].Zone)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CodeUsers) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Users":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Users")
				return
			}
			if cap(z.Users) >= int(zb0002) {
				z.Users = (z.Users)[:zb0002]
			} else {
				z.Users = make([]*CodeUser, zb0002)
			}
			for za0001 := range z.Users {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Users[za0001] = nil
				} else {
					if z.Users[za0001] == nil {
						z.Users[za0001] = new(CodeUser)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Users", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Users", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "UID":
							z.Users[za0001].UID, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Users", za0001, "UID")
								return
							}
						case "Zone":
							z.Users[za0001].Zone, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Users", za0001, "Zone")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Users", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CodeUsers) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Users {
		if z.Users[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.Uint64Size + 5 + msgp.Uint32Size
		}
	}
	return
}
