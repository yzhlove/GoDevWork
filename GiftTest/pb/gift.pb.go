// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gift.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Manager struct {
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(dst, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

type Manager_Nil struct {
}

func (m *Manager_Nil) Reset()         { *m = Manager_Nil{} }
func (m *Manager_Nil) String() string { return proto.CompactTextString(m) }
func (*Manager_Nil) ProtoMessage()    {}
func (*Manager_Nil) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 0}
}
func (m *Manager_Nil) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_Nil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_Nil.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_Nil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_Nil.Merge(dst, src)
}
func (m *Manager_Nil) XXX_Size() int {
	return m.Size()
}
func (m *Manager_Nil) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_Nil.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_Nil proto.InternalMessageInfo

type Manager_Item struct {
	Id  uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Num int32  `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
}

func (m *Manager_Item) Reset()         { *m = Manager_Item{} }
func (m *Manager_Item) String() string { return proto.CompactTextString(m) }
func (*Manager_Item) ProtoMessage()    {}
func (*Manager_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 1}
}
func (m *Manager_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_Item.Merge(dst, src)
}
func (m *Manager_Item) XXX_Size() int {
	return m.Size()
}
func (m *Manager_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_Item proto.InternalMessageInfo

func (m *Manager_Item) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Manager_Item) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Manager_GenReq struct {
	FixCode      string          `protobuf:"bytes,1,opt,name=FixCode,proto3" json:"FixCode,omitempty"`
	Num          uint32          `protobuf:"varint,2,opt,name=Num,proto3" json:"Num,omitempty"`
	StartTime    int64           `protobuf:"varint,3,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime      int64           `protobuf:"varint,4,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	TimesPerCode uint32          `protobuf:"varint,5,opt,name=TimesPerCode,proto3" json:"TimesPerCode,omitempty"`
	TimesPerUser uint32          `protobuf:"varint,6,opt,name=TimesPerUser,proto3" json:"TimesPerUser,omitempty"`
	ZoneIds      []uint32        `protobuf:"varint,7,rep,packed,name=ZoneIds" json:"ZoneIds,omitempty"`
	Items        []*Manager_Item `protobuf:"bytes,8,rep,name=Items" json:"Items,omitempty"`
}

func (m *Manager_GenReq) Reset()         { *m = Manager_GenReq{} }
func (m *Manager_GenReq) String() string { return proto.CompactTextString(m) }
func (*Manager_GenReq) ProtoMessage()    {}
func (*Manager_GenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 2}
}
func (m *Manager_GenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_GenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_GenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_GenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_GenReq.Merge(dst, src)
}
func (m *Manager_GenReq) XXX_Size() int {
	return m.Size()
}
func (m *Manager_GenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_GenReq.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_GenReq proto.InternalMessageInfo

func (m *Manager_GenReq) GetFixCode() string {
	if m != nil {
		return m.FixCode
	}
	return ""
}

func (m *Manager_GenReq) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Manager_GenReq) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Manager_GenReq) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Manager_GenReq) GetTimesPerCode() uint32 {
	if m != nil {
		return m.TimesPerCode
	}
	return 0
}

func (m *Manager_GenReq) GetTimesPerUser() uint32 {
	if m != nil {
		return m.TimesPerUser
	}
	return 0
}

func (m *Manager_GenReq) GetZoneIds() []uint32 {
	if m != nil {
		return m.ZoneIds
	}
	return nil
}

func (m *Manager_GenReq) GetItems() []*Manager_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type Manager_ExportReq struct {
	Id uint32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *Manager_ExportReq) Reset()         { *m = Manager_ExportReq{} }
func (m *Manager_ExportReq) String() string { return proto.CompactTextString(m) }
func (*Manager_ExportReq) ProtoMessage()    {}
func (*Manager_ExportReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 3}
}
func (m *Manager_ExportReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_ExportReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_ExportReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_ExportReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_ExportReq.Merge(dst, src)
}
func (m *Manager_ExportReq) XXX_Size() int {
	return m.Size()
}
func (m *Manager_ExportReq) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_ExportReq.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_ExportReq proto.InternalMessageInfo

func (m *Manager_ExportReq) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Manager_CodeStatus struct {
	Code   string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	UserId int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	ZoneId uint32 `protobuf:"varint,3,opt,name=ZoneId,proto3" json:"ZoneId,omitempty"`
}

func (m *Manager_CodeStatus) Reset()         { *m = Manager_CodeStatus{} }
func (m *Manager_CodeStatus) String() string { return proto.CompactTextString(m) }
func (*Manager_CodeStatus) ProtoMessage()    {}
func (*Manager_CodeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 4}
}
func (m *Manager_CodeStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_CodeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_CodeStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_CodeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_CodeStatus.Merge(dst, src)
}
func (m *Manager_CodeStatus) XXX_Size() int {
	return m.Size()
}
func (m *Manager_CodeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_CodeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_CodeStatus proto.InternalMessageInfo

func (m *Manager_CodeStatus) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Manager_CodeStatus) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Manager_CodeStatus) GetZoneId() uint32 {
	if m != nil {
		return m.ZoneId
	}
	return 0
}

type Manager_ExportResp struct {
	Details []*Manager_CodeStatus `protobuf:"bytes,1,rep,name=Details" json:"Details,omitempty"`
}

func (m *Manager_ExportResp) Reset()         { *m = Manager_ExportResp{} }
func (m *Manager_ExportResp) String() string { return proto.CompactTextString(m) }
func (*Manager_ExportResp) ProtoMessage()    {}
func (*Manager_ExportResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 5}
}
func (m *Manager_ExportResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_ExportResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_ExportResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_ExportResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_ExportResp.Merge(dst, src)
}
func (m *Manager_ExportResp) XXX_Size() int {
	return m.Size()
}
func (m *Manager_ExportResp) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_ExportResp.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_ExportResp proto.InternalMessageInfo

func (m *Manager_ExportResp) GetDetails() []*Manager_CodeStatus {
	if m != nil {
		return m.Details
	}
	return nil
}

type Manager_CodeInfo struct {
	Id      uint32          `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Used    uint32          `protobuf:"varint,2,opt,name=Used,proto3" json:"Used,omitempty"`
	GenInfo *Manager_GenReq `protobuf:"bytes,3,opt,name=GenInfo" json:"GenInfo,omitempty"`
}

func (m *Manager_CodeInfo) Reset()         { *m = Manager_CodeInfo{} }
func (m *Manager_CodeInfo) String() string { return proto.CompactTextString(m) }
func (*Manager_CodeInfo) ProtoMessage()    {}
func (*Manager_CodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 6}
}
func (m *Manager_CodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_CodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_CodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_CodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_CodeInfo.Merge(dst, src)
}
func (m *Manager_CodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *Manager_CodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_CodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_CodeInfo proto.InternalMessageInfo

func (m *Manager_CodeInfo) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Manager_CodeInfo) GetUsed() uint32 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *Manager_CodeInfo) GetGenInfo() *Manager_GenReq {
	if m != nil {
		return m.GenInfo
	}
	return nil
}

type Manager_ListResp struct {
	Details []*Manager_CodeInfo `protobuf:"bytes,1,rep,name=Details" json:"Details,omitempty"`
}

func (m *Manager_ListResp) Reset()         { *m = Manager_ListResp{} }
func (m *Manager_ListResp) String() string { return proto.CompactTextString(m) }
func (*Manager_ListResp) ProtoMessage()    {}
func (*Manager_ListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{0, 7}
}
func (m *Manager_ListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_ListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_ListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Manager_ListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_ListResp.Merge(dst, src)
}
func (m *Manager_ListResp) XXX_Size() int {
	return m.Size()
}
func (m *Manager_ListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_ListResp.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_ListResp proto.InternalMessageInfo

func (m *Manager_ListResp) GetDetails() []*Manager_CodeInfo {
	if m != nil {
		return m.Details
	}
	return nil
}

type VerifyReq struct {
	Code   string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Zone   uint32 `protobuf:"varint,2,opt,name=Zone,proto3" json:"Zone,omitempty"`
	UserId int64  `protobuf:"varint,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (m *VerifyReq) Reset()         { *m = VerifyReq{} }
func (m *VerifyReq) String() string { return proto.CompactTextString(m) }
func (*VerifyReq) ProtoMessage()    {}
func (*VerifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{1}
}
func (m *VerifyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyReq.Merge(dst, src)
}
func (m *VerifyReq) XXX_Size() int {
	return m.Size()
}
func (m *VerifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyReq proto.InternalMessageInfo

func (m *VerifyReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *VerifyReq) GetZone() uint32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func (m *VerifyReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type VerifyResp struct {
	Status uint32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *VerifyResp) Reset()         { *m = VerifyResp{} }
func (m *VerifyResp) String() string { return proto.CompactTextString(m) }
func (*VerifyResp) ProtoMessage()    {}
func (*VerifyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{2}
}
func (m *VerifyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VerifyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyResp.Merge(dst, src)
}
func (m *VerifyResp) XXX_Size() int {
	return m.Size()
}
func (m *VerifyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyResp.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyResp proto.InternalMessageInfo

func (m *VerifyResp) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type SyncReq struct {
	Zone uint32 `protobuf:"varint,1,opt,name=Zone,proto3" json:"Zone,omitempty"`
}

func (m *SyncReq) Reset()         { *m = SyncReq{} }
func (m *SyncReq) String() string { return proto.CompactTextString(m) }
func (*SyncReq) ProtoMessage()    {}
func (*SyncReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_gift_9b72a7143c6ff089, []int{3}
}
func (m *SyncReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SyncReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncReq.Merge(dst, src)
}
func (m *SyncReq) XXX_Size() int {
	return m.Size()
}
func (m *SyncReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncReq.DiscardUnknown(m)
}

var xxx_messageInfo_SyncReq proto.InternalMessageInfo

func (m *SyncReq) GetZone() uint32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func init() {
	proto.RegisterType((*Manager)(nil), "pb.Manager")
	proto.RegisterType((*Manager_Nil)(nil), "pb.Manager.Nil")
	proto.RegisterType((*Manager_Item)(nil), "pb.Manager.Item")
	proto.RegisterType((*Manager_GenReq)(nil), "pb.Manager.GenReq")
	proto.RegisterType((*Manager_ExportReq)(nil), "pb.Manager.ExportReq")
	proto.RegisterType((*Manager_CodeStatus)(nil), "pb.Manager.CodeStatus")
	proto.RegisterType((*Manager_ExportResp)(nil), "pb.Manager.ExportResp")
	proto.RegisterType((*Manager_CodeInfo)(nil), "pb.Manager.CodeInfo")
	proto.RegisterType((*Manager_ListResp)(nil), "pb.Manager.ListResp")
	proto.RegisterType((*VerifyReq)(nil), "pb.VerifyReq")
	proto.RegisterType((*VerifyResp)(nil), "pb.VerifyResp")
	proto.RegisterType((*SyncReq)(nil), "pb.SyncReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GiftServiceClient is the client API for GiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GiftServiceClient interface {
	Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (GiftService_SyncClient, error)
	CodeVerify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
	Generate(ctx context.Context, in *Manager_GenReq, opts ...grpc.CallOption) (*Manager_Nil, error)
	List(ctx context.Context, in *Manager_Nil, opts ...grpc.CallOption) (*Manager_ListResp, error)
	Export(ctx context.Context, in *Manager_ExportReq, opts ...grpc.CallOption) (*Manager_ExportResp, error)
}

type giftServiceClient struct {
	cc *grpc.ClientConn
}

func NewGiftServiceClient(cc *grpc.ClientConn) GiftServiceClient {
	return &giftServiceClient{cc}
}

func (c *giftServiceClient) Sync(ctx context.Context, in *SyncReq, opts ...grpc.CallOption) (GiftService_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GiftService_serviceDesc.Streams[0], "/pb.GiftService/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &giftServiceSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GiftService_SyncClient interface {
	Recv() (*Manager_CodeInfo, error)
	grpc.ClientStream
}

type giftServiceSyncClient struct {
	grpc.ClientStream
}

func (x *giftServiceSyncClient) Recv() (*Manager_CodeInfo, error) {
	m := new(Manager_CodeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *giftServiceClient) CodeVerify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, "/pb.GiftService/CodeVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) Generate(ctx context.Context, in *Manager_GenReq, opts ...grpc.CallOption) (*Manager_Nil, error) {
	out := new(Manager_Nil)
	err := c.cc.Invoke(ctx, "/pb.GiftService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) List(ctx context.Context, in *Manager_Nil, opts ...grpc.CallOption) (*Manager_ListResp, error) {
	out := new(Manager_ListResp)
	err := c.cc.Invoke(ctx, "/pb.GiftService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *giftServiceClient) Export(ctx context.Context, in *Manager_ExportReq, opts ...grpc.CallOption) (*Manager_ExportResp, error) {
	out := new(Manager_ExportResp)
	err := c.cc.Invoke(ctx, "/pb.GiftService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GiftServiceServer is the server API for GiftService service.
type GiftServiceServer interface {
	Sync(*SyncReq, GiftService_SyncServer) error
	CodeVerify(context.Context, *VerifyReq) (*VerifyResp, error)
	Generate(context.Context, *Manager_GenReq) (*Manager_Nil, error)
	List(context.Context, *Manager_Nil) (*Manager_ListResp, error)
	Export(context.Context, *Manager_ExportReq) (*Manager_ExportResp, error)
}

func RegisterGiftServiceServer(s *grpc.Server, srv GiftServiceServer) {
	s.RegisterService(&_GiftService_serviceDesc, srv)
}

func _GiftService_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GiftServiceServer).Sync(m, &giftServiceSyncServer{stream})
}

type GiftService_SyncServer interface {
	Send(*Manager_CodeInfo) error
	grpc.ServerStream
}

type giftServiceSyncServer struct {
	grpc.ServerStream
}

func (x *giftServiceSyncServer) Send(m *Manager_CodeInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _GiftService_CodeVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).CodeVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GiftService/CodeVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).CodeVerify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manager_GenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GiftService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).Generate(ctx, req.(*Manager_GenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manager_Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GiftService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).List(ctx, req.(*Manager_Nil))
	}
	return interceptor(ctx, in, info, handler)
}

func _GiftService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manager_ExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GiftServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GiftService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GiftServiceServer).Export(ctx, req.(*Manager_ExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _GiftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GiftService",
	HandlerType: (*GiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CodeVerify",
			Handler:    _GiftService_CodeVerify_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _GiftService_Generate_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GiftService_List_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _GiftService_Export_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _GiftService_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gift.proto",
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Manager_Nil) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_Nil) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Manager_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Id))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *Manager_GenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_GenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FixCode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(len(m.FixCode)))
		i += copy(dAtA[i:], m.FixCode)
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Num))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.EndTime))
	}
	if m.TimesPerCode != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.TimesPerCode))
	}
	if m.TimesPerUser != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.TimesPerUser))
	}
	if len(m.ZoneIds) > 0 {
		dAtA2 := make([]byte, len(m.ZoneIds)*10)
		var j1 int
		for _, num := range m.ZoneIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGift(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x42
			i++
			i = encodeVarintGift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Manager_ExportReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_ExportReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *Manager_CodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_CodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.UserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.UserId))
	}
	if m.ZoneId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.ZoneId))
	}
	return i, nil
}

func (m *Manager_ExportResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_ExportResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Manager_CodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_CodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Id))
	}
	if m.Used != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Used))
	}
	if m.GenInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.GenInfo.Size()))
		n3, err := m.GenInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Manager_ListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_ListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGift(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *VerifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Zone != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Zone))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *VerifyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *SyncReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Zone != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Zone))
	}
	return i, nil
}

func encodeVarintGift(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Manager_Nil) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Manager_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGift(uint64(m.Id))
	}
	if m.Num != 0 {
		n += 1 + sovGift(uint64(m.Num))
	}
	return n
}

func (m *Manager_GenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FixCode)
	if l > 0 {
		n += 1 + l + sovGift(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovGift(uint64(m.Num))
	}
	if m.StartTime != 0 {
		n += 1 + sovGift(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGift(uint64(m.EndTime))
	}
	if m.TimesPerCode != 0 {
		n += 1 + sovGift(uint64(m.TimesPerCode))
	}
	if m.TimesPerUser != 0 {
		n += 1 + sovGift(uint64(m.TimesPerUser))
	}
	if len(m.ZoneIds) > 0 {
		l = 0
		for _, e := range m.ZoneIds {
			l += sovGift(uint64(e))
		}
		n += 1 + sovGift(uint64(l)) + l
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGift(uint64(l))
		}
	}
	return n
}

func (m *Manager_ExportReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGift(uint64(m.Id))
	}
	return n
}

func (m *Manager_CodeStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGift(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovGift(uint64(m.UserId))
	}
	if m.ZoneId != 0 {
		n += 1 + sovGift(uint64(m.ZoneId))
	}
	return n
}

func (m *Manager_ExportResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovGift(uint64(l))
		}
	}
	return n
}

func (m *Manager_CodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGift(uint64(m.Id))
	}
	if m.Used != 0 {
		n += 1 + sovGift(uint64(m.Used))
	}
	if m.GenInfo != nil {
		l = m.GenInfo.Size()
		n += 1 + l + sovGift(uint64(l))
	}
	return n
}

func (m *Manager_ListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovGift(uint64(l))
		}
	}
	return n
}

func (m *VerifyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGift(uint64(l))
	}
	if m.Zone != 0 {
		n += 1 + sovGift(uint64(m.Zone))
	}
	if m.UserId != 0 {
		n += 1 + sovGift(uint64(m.UserId))
	}
	return n
}

func (m *VerifyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovGift(uint64(m.Status))
	}
	return n
}

func (m *SyncReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zone != 0 {
		n += 1 + sovGift(uint64(m.Zone))
	}
	return n
}

func sovGift(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGift(x uint64) (n int) {
	return sovGift(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_Nil) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nil: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nil: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_GenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimesPerCode", wireType)
			}
			m.TimesPerCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimesPerCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimesPerUser", wireType)
			}
			m.TimesPerUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimesPerUser |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGift
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ZoneIds = append(m.ZoneIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGift
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGift
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ZoneIds) == 0 {
					m.ZoneIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGift
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ZoneIds = append(m.ZoneIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneIds", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Manager_Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_ExportReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_CodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneId", wireType)
			}
			m.ZoneId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZoneId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_ExportResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExportResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExportResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &Manager_CodeStatus{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_CodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			m.Used = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Used |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenInfo == nil {
				m.GenInfo = &Manager_GenReq{}
			}
			if err := m.GenInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_ListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &Manager_CodeInfo{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			m.Zone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zone |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			m.Zone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zone |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGift(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGift
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGift
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGift
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGift(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGift = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGift   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gift.proto", fileDescriptor_gift_9b72a7143c6ff089) }

var fileDescriptor_gift_9b72a7143c6ff089 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x63, 0x27, 0x4e, 0x26, 0xa4, 0x54, 0x23, 0xa8, 0xac, 0x05, 0xac, 0x28, 0x42, 0xc8,
	0x52, 0x21, 0x54, 0xe1, 0x80, 0xc4, 0x81, 0x03, 0x50, 0x22, 0x0b, 0x88, 0xaa, 0x0d, 0xe5, 0x80,
	0xb8, 0x38, 0xf5, 0xa6, 0xb2, 0x94, 0xd8, 0xc6, 0xbb, 0x45, 0xed, 0x8d, 0x47, 0xe0, 0xb1, 0x38,
	0xf6, 0xc8, 0x11, 0x25, 0xef, 0xc0, 0x89, 0x03, 0x9a, 0xb5, 0x9d, 0x38, 0x21, 0x27, 0xcf, 0xcf,
	0x37, 0x33, 0xdf, 0x7c, 0xb3, 0x32, 0xc0, 0x45, 0x34, 0x55, 0xfd, 0x34, 0x4b, 0x54, 0x82, 0xb5,
	0x74, 0xd2, 0xfb, 0x6b, 0x81, 0xfd, 0x21, 0x88, 0x83, 0x0b, 0x91, 0xb1, 0x3a, 0x98, 0xa3, 0x68,
	0xc6, 0x3c, 0xb0, 0x7c, 0x25, 0xe6, 0xb8, 0x0f, 0x35, 0x3f, 0x74, 0x8c, 0xae, 0xe1, 0x75, 0x78,
	0xcd, 0x0f, 0xf1, 0x00, 0xcc, 0xd1, 0xe5, 0xdc, 0xa9, 0x75, 0x0d, 0xaf, 0xce, 0xc9, 0x64, 0x7f,
	0x0c, 0x68, 0x0c, 0x45, 0xcc, 0xc5, 0x57, 0x74, 0xc0, 0x7e, 0x1b, 0x5d, 0xbd, 0x4e, 0x42, 0xa1,
	0x2b, 0x5a, 0xbc, 0x74, 0xab, 0x65, 0x1d, 0x5d, 0x86, 0xf7, 0xa1, 0x35, 0x56, 0x41, 0xa6, 0x3e,
	0x46, 0x73, 0xe1, 0x98, 0x5d, 0xc3, 0x33, 0xf9, 0x3a, 0x40, 0x9d, 0x4e, 0xe2, 0x50, 0xe7, 0x2c,
	0x9d, 0x2b, 0x5d, 0xec, 0xc1, 0x2d, 0xfa, 0xca, 0x53, 0x91, 0xe9, 0x41, 0x75, 0xdd, 0x72, 0x23,
	0x56, 0xc5, 0x9c, 0x49, 0x91, 0x39, 0x8d, 0x4d, 0x0c, 0xc5, 0x68, 0xc2, 0xe7, 0x24, 0x16, 0x7e,
	0x28, 0x1d, 0xbb, 0x6b, 0x7a, 0x1d, 0x5e, 0xba, 0xf8, 0x08, 0xea, 0xb4, 0xba, 0x74, 0x9a, 0x5d,
	0xd3, 0x6b, 0x0f, 0x0e, 0xfa, 0xe9, 0xa4, 0x5f, 0xa8, 0xd3, 0xa7, 0x04, 0xcf, 0xd3, 0xec, 0x1e,
	0xb4, 0x4e, 0xae, 0xd2, 0x24, 0x53, 0xb4, 0xfa, 0x96, 0x4e, 0xec, 0x14, 0x80, 0xa8, 0x8c, 0x55,
	0xa0, 0x2e, 0x25, 0x22, 0x58, 0x15, 0x55, 0xb4, 0x8d, 0x87, 0xd0, 0x20, 0x22, 0x7e, 0xa8, 0x55,
	0x31, 0x79, 0xe1, 0x51, 0x3c, 0x67, 0xa2, 0x55, 0xe9, 0xf0, 0xc2, 0x63, 0x2f, 0x01, 0xca, 0x71,
	0x32, 0xc5, 0x63, 0xb0, 0xdf, 0x08, 0x15, 0x44, 0x33, 0xe9, 0x18, 0x9a, 0xe6, 0x61, 0x95, 0xe6,
	0x7a, 0x34, 0x2f, 0x61, 0xec, 0x0b, 0x34, 0x29, 0xec, 0xc7, 0xd3, 0xe4, 0xbf, 0xab, 0x22, 0x58,
	0x67, 0x52, 0x84, 0xc5, 0x7d, 0xb4, 0x8d, 0x8f, 0xc1, 0x1e, 0x8a, 0x98, 0xe0, 0x9a, 0x48, 0x7b,
	0x80, 0xd5, 0x09, 0xf9, 0xc5, 0x79, 0x09, 0x61, 0x2f, 0xa0, 0xf9, 0x3e, 0x92, 0x39, 0xb7, 0xfe,
	0x36, 0xb7, 0x3b, 0xdb, 0xdc, 0xa8, 0x64, 0xc5, 0xac, 0xf7, 0x0e, 0x5a, 0x9f, 0x44, 0x16, 0x4d,
	0xaf, 0x49, 0xc8, 0x5d, 0x52, 0x21, 0x58, 0x24, 0x42, 0x49, 0x8f, 0xec, 0x8a, 0x7c, 0x66, 0x55,
	0xbe, 0xde, 0x43, 0x80, 0xb2, 0x99, 0x4c, 0x09, 0x95, 0xeb, 0x50, 0x2c, 0x5b, 0x78, 0xbd, 0x07,
	0x60, 0x8f, 0xaf, 0xe3, 0xf3, 0x62, 0xa0, 0x6e, 0x6e, 0xac, 0x9b, 0x0f, 0xbe, 0xd7, 0xa0, 0x3d,
	0x8c, 0xa6, 0x6a, 0x2c, 0xb2, 0x6f, 0xd1, 0xb9, 0xc0, 0x23, 0xb0, 0x08, 0x8e, 0x6d, 0x5a, 0xa4,
	0x28, 0x64, 0x3b, 0xb7, 0x3a, 0x36, 0xf0, 0x28, 0x3f, 0x7d, 0xce, 0x02, 0x3b, 0x84, 0x5a, 0xad,
	0xc7, 0xf6, 0xab, 0xae, 0x4c, 0xf1, 0x29, 0x34, 0x87, 0x22, 0x16, 0x59, 0xa0, 0x04, 0xee, 0x10,
	0x98, 0xdd, 0xae, 0xc6, 0x46, 0xd1, 0x0c, 0x9f, 0x80, 0x45, 0x42, 0xe3, 0x76, 0x62, 0x93, 0xce,
	0xea, 0x16, 0xcf, 0xa1, 0x91, 0xbf, 0x1a, 0xbc, 0x5b, 0xcd, 0xaf, 0x1e, 0x2e, 0x3b, 0xdc, 0x15,
	0x96, 0xe9, 0x2b, 0xe7, 0xe7, 0xc2, 0x35, 0x6e, 0x16, 0xae, 0xf1, 0x7b, 0xe1, 0x1a, 0x3f, 0x96,
	0xee, 0xde, 0xcd, 0xd2, 0xdd, 0xfb, 0xb5, 0x74, 0xf7, 0x26, 0x0d, 0xfd, 0xe3, 0x78, 0xf6, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xb2, 0xcf, 0xce, 0x41, 0x46, 0x04, 0x00, 0x00,
}
