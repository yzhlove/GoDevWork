// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pubsubservice.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Manager struct {
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3c17a182e409fe, []int{0}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

type Manager_Msg struct {
	Zone uint32 `protobuf:"varint,1,opt,name=Zone,proto3" json:"Zone,omitempty"`
	Var  string `protobuf:"bytes,2,opt,name=Var,proto3" json:"Var,omitempty"`
}

func (m *Manager_Msg) Reset()         { *m = Manager_Msg{} }
func (m *Manager_Msg) String() string { return proto.CompactTextString(m) }
func (*Manager_Msg) ProtoMessage()    {}
func (*Manager_Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3c17a182e409fe, []int{0, 0}
}
func (m *Manager_Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager_Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_Msg.Merge(m, src)
}
func (m *Manager_Msg) XXX_Size() int {
	return m.Size()
}
func (m *Manager_Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_Msg proto.InternalMessageInfo

func (m *Manager_Msg) GetZone() uint32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func (m *Manager_Msg) GetVar() string {
	if m != nil {
		return m.Var
	}
	return ""
}

type Manager_Zone struct {
	Var uint32 `protobuf:"varint,1,opt,name=Var,proto3" json:"Var,omitempty"`
}

func (m *Manager_Zone) Reset()         { *m = Manager_Zone{} }
func (m *Manager_Zone) String() string { return proto.CompactTextString(m) }
func (*Manager_Zone) ProtoMessage()    {}
func (*Manager_Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3c17a182e409fe, []int{0, 1}
}
func (m *Manager_Zone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_Zone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager_Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_Zone.Merge(m, src)
}
func (m *Manager_Zone) XXX_Size() int {
	return m.Size()
}
func (m *Manager_Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_Zone proto.InternalMessageInfo

func (m *Manager_Zone) GetVar() uint32 {
	if m != nil {
		return m.Var
	}
	return 0
}

type Manager_Nil struct {
}

func (m *Manager_Nil) Reset()         { *m = Manager_Nil{} }
func (m *Manager_Nil) String() string { return proto.CompactTextString(m) }
func (*Manager_Nil) ProtoMessage()    {}
func (*Manager_Nil) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a3c17a182e409fe, []int{0, 2}
}
func (m *Manager_Nil) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager_Nil) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager_Nil.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager_Nil) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager_Nil.Merge(m, src)
}
func (m *Manager_Nil) XXX_Size() int {
	return m.Size()
}
func (m *Manager_Nil) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager_Nil.DiscardUnknown(m)
}

var xxx_messageInfo_Manager_Nil proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Manager)(nil), "proto.Manager")
	proto.RegisterType((*Manager_Msg)(nil), "proto.Manager.Msg")
	proto.RegisterType((*Manager_Zone)(nil), "proto.Manager.Zone")
	proto.RegisterType((*Manager_Nil)(nil), "proto.Manager.Nil")
}

func init() { proto.RegisterFile("pubsubservice.proto", fileDescriptor_9a3c17a182e409fe) }

var fileDescriptor_9a3c17a182e409fe = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x28, 0x4d, 0x2a,
	0x2e, 0x4d, 0x2a, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x05, 0x53, 0x4a, 0xe1, 0x5c, 0xec, 0xbe, 0x89, 0x79, 0x89, 0xe9, 0xa9, 0x45, 0x52, 0xda,
	0x5c, 0xcc, 0xbe, 0xc5, 0xe9, 0x42, 0x42, 0x5c, 0x2c, 0x51, 0xf9, 0x79, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xbc, 0x41, 0x60, 0xb6, 0x90, 0x00, 0x17, 0x73, 0x58, 0x62, 0x91, 0x04, 0x93, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0x88, 0x29, 0x25, 0xc1, 0x85, 0x22, 0x03, 0x51, 0x0c, 0x96, 0x61, 0xe5,
	0x62, 0xf6, 0xcb, 0xcc, 0x31, 0xaa, 0xe4, 0x12, 0x0b, 0x28, 0x4d, 0x0a, 0x2e, 0x4d, 0x0a, 0x86,
	0x58, 0xeb, 0x99, 0x57, 0x92, 0x5a, 0x94, 0x96, 0x98, 0x9c, 0x2a, 0xa4, 0xcb, 0xc5, 0x1c, 0x50,
	0x9a, 0x24, 0x24, 0x04, 0x71, 0x88, 0x1e, 0xd4, 0x7a, 0x3d, 0xdf, 0xe2, 0x74, 0x29, 0x74, 0x31,
	0xbf, 0xcc, 0x1c, 0x21, 0x03, 0x2e, 0xe6, 0xe0, 0xd2, 0x24, 0x21, 0x61, 0x34, 0x29, 0x90, 0xed,
	0x52, 0x58, 0xcc, 0x30, 0x60, 0x74, 0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x24, 0x36, 0xb0, 0x72, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xfd, 0x5c, 0xa1,
	0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubServiceInterfaceClient is the client API for PubSubServiceInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubServiceInterfaceClient interface {
	Pub(ctx context.Context, in *Manager_Msg, opts ...grpc.CallOption) (*Manager_Nil, error)
	Sub(ctx context.Context, in *Manager_Zone, opts ...grpc.CallOption) (PubSubServiceInterface_SubClient, error)
}

type pubSubServiceInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewPubSubServiceInterfaceClient(cc *grpc.ClientConn) PubSubServiceInterfaceClient {
	return &pubSubServiceInterfaceClient{cc}
}

func (c *pubSubServiceInterfaceClient) Pub(ctx context.Context, in *Manager_Msg, opts ...grpc.CallOption) (*Manager_Nil, error) {
	out := new(Manager_Nil)
	err := c.cc.Invoke(ctx, "/proto.PubSubServiceInterface/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubServiceInterfaceClient) Sub(ctx context.Context, in *Manager_Zone, opts ...grpc.CallOption) (PubSubServiceInterface_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSubServiceInterface_serviceDesc.Streams[0], "/proto.PubSubServiceInterface/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubServiceInterfaceSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSubServiceInterface_SubClient interface {
	Recv() (*Manager_Msg, error)
	grpc.ClientStream
}

type pubSubServiceInterfaceSubClient struct {
	grpc.ClientStream
}

func (x *pubSubServiceInterfaceSubClient) Recv() (*Manager_Msg, error) {
	m := new(Manager_Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServiceInterfaceServer is the server API for PubSubServiceInterface service.
type PubSubServiceInterfaceServer interface {
	Pub(context.Context, *Manager_Msg) (*Manager_Nil, error)
	Sub(*Manager_Zone, PubSubServiceInterface_SubServer) error
}

// UnimplementedPubSubServiceInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServiceInterfaceServer struct {
}

func (*UnimplementedPubSubServiceInterfaceServer) Pub(ctx context.Context, req *Manager_Msg) (*Manager_Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub not implemented")
}
func (*UnimplementedPubSubServiceInterfaceServer) Sub(req *Manager_Zone, srv PubSubServiceInterface_SubServer) error {
	return status.Errorf(codes.Unimplemented, "method Sub not implemented")
}

func RegisterPubSubServiceInterfaceServer(s *grpc.Server, srv PubSubServiceInterfaceServer) {
	s.RegisterService(&_PubSubServiceInterface_serviceDesc, srv)
}

func _PubSubServiceInterface_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manager_Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServiceInterfaceServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PubSubServiceInterface/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServiceInterfaceServer).Pub(ctx, req.(*Manager_Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubServiceInterface_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Manager_Zone)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServiceInterfaceServer).Sub(m, &pubSubServiceInterfaceSubServer{stream})
}

type PubSubServiceInterface_SubServer interface {
	Send(*Manager_Msg) error
	grpc.ServerStream
}

type pubSubServiceInterfaceSubServer struct {
	grpc.ServerStream
}

func (x *pubSubServiceInterfaceSubServer) Send(m *Manager_Msg) error {
	return x.ServerStream.SendMsg(m)
}

var _PubSubServiceInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PubSubServiceInterface",
	HandlerType: (*PubSubServiceInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _PubSubServiceInterface_Pub_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _PubSubServiceInterface_Sub_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubsubservice.proto",
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Manager_Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager_Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Var) > 0 {
		i -= len(m.Var)
		copy(dAtA[i:], m.Var)
		i = encodeVarintPubsubservice(dAtA, i, uint64(len(m.Var)))
		i--
		dAtA[i] = 0x12
	}
	if m.Zone != 0 {
		i = encodeVarintPubsubservice(dAtA, i, uint64(m.Zone))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Manager_Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager_Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Var != 0 {
		i = encodeVarintPubsubservice(dAtA, i, uint64(m.Var))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Manager_Nil) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager_Nil) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager_Nil) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintPubsubservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovPubsubservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Manager_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Zone != 0 {
		n += 1 + sovPubsubservice(uint64(m.Zone))
	}
	l = len(m.Var)
	if l > 0 {
		n += 1 + l + sovPubsubservice(uint64(l))
	}
	return n
}

func (m *Manager_Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Var != 0 {
		n += 1 + sovPubsubservice(uint64(m.Var))
	}
	return n
}

func (m *Manager_Nil) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPubsubservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPubsubservice(x uint64) (n int) {
	return sovPubsubservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			m.Zone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Zone |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Var", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPubsubservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Var = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Var", wireType)
			}
			m.Var = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubsubservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Var |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager_Nil) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubsubservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nil: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nil: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPubsubservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPubsubservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubsubservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubsubservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsubservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubsubservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPubsubservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPubsubservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPubsubservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPubsubservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubsubservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPubsubservice = fmt.Errorf("proto: unexpected end of group")
)
