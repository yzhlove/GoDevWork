package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z *Content) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Id"
	o = append(o, 0x82, 0xa2, 0x49, 0x64)
	o = msgp.AppendUint32(o, z.Id)
	// string "Reply"
	o = append(o, 0xa5, 0x52, 0x65, 0x70, 0x6c, 0x79)
	if z.Reply == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Reply.MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Content) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Reply":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Reply = nil
			} else {
				if z.Reply == nil {
					z.Reply = new(Content)
				}
				bts, err = z.Reply.UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Content) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 6
	if z.Reply == nil {
		s += msgp.NilSize
	} else {
		s += z.Reply.Msgsize()
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Wechat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Hid"
	o = append(o, 0x82, 0xa3, 0x48, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.Hid)
	// string "Contents"
	o = append(o, 0xa8, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Contents)))
	for za0001 := range z.Contents {
		if z.Contents[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Id"
			o = append(o, 0x82, 0xa2, 0x49, 0x64)
			o = msgp.AppendUint32(o, z.Contents[za0001].Id)
			// string "Reply"
			o = append(o, 0xa5, 0x52, 0x65, 0x70, 0x6c, 0x79)
			if z.Contents[za0001].Reply == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Contents[za0001].Reply.MarshalMsg(o)
				if err != nil {
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Wechat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Hid":
			z.Hid, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				return
			}
		case "Contents":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Contents) >= int(zb0002) {
				z.Contents = (z.Contents)[:zb0002]
			} else {
				z.Contents = make([]*Content, zb0002)
			}
			for za0001 := range z.Contents {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Contents[za0001] = nil
				} else {
					if z.Contents[za0001] == nil {
						z.Contents[za0001] = new(Content)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Id":
							z.Contents[za0001].Id, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								return
							}
						case "Reply":
							if msgp.IsNil(bts) {
								bts, err = msgp.ReadNilBytes(bts)
								if err != nil {
									return
								}
								z.Contents[za0001].Reply = nil
							} else {
								if z.Contents[za0001].Reply == nil {
									z.Contents[za0001].Reply = new(Content)
								}
								bts, err = z.Contents[za0001].Reply.UnmarshalMsg(bts)
								if err != nil {
									return
								}
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Wechat) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint32Size + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Contents {
		if z.Contents[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 3 + msgp.Uint32Size + 6
			if z.Contents[za0001].Reply == nil {
				s += msgp.NilSize
			} else {
				s += z.Contents[za0001].Reply.Msgsize()
			}
		}
	}
	return
}
